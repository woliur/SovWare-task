// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'db/itemModel.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1066076963080687218),
      name: 'DBItems',
      lastPropertyId: const IdUid(76, 1546860424863992864),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1803969030531779967),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1204535317457938012),
            name: 'nodeId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2513033781801637394),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5593007321031593026),
            name: 'fullName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 615019798901633213),
            name: 'private',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6781654696077549269),
            name: 'htmlUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7192653145844833504),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8412425126262480406),
            name: 'fork',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4603366313251732992),
            name: 'url',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4726508895780354192),
            name: 'forksUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4991031577342791919),
            name: 'keysUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2714937961710467190),
            name: 'collaboratorsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4283447334096165991),
            name: 'teamsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 376392491033706148),
            name: 'hooksUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 2679253606601866849),
            name: 'issueEventsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 5017491234542994388),
            name: 'eventsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 7638669293623146438),
            name: 'assigneesUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 1554721858679912057),
            name: 'branchesUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 8853951203609661082),
            name: 'tagsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 4020418712060475794),
            name: 'blobsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 9057083441966429927),
            name: 'gitTagsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 3389532773246642056),
            name: 'gitRefsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 8162193400063576790),
            name: 'treesUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 8617471723732361848),
            name: 'statusesUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 2856115813177550651),
            name: 'languagesUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 8646154555329690146),
            name: 'stargazersUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 6107726258985041916),
            name: 'contributorsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 2161717424446447652),
            name: 'subscribersUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 2216497832585384237),
            name: 'subscriptionUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 6776544122816942943),
            name: 'commitsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 6724146582552683863),
            name: 'gitCommitsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 7496223784807769094),
            name: 'commentsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 6379115783083532337),
            name: 'issueCommentUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 5444856134037515827),
            name: 'contentsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 6500891300487084025),
            name: 'compareUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 3543273372267944310),
            name: 'mergesUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 3369815127050070746),
            name: 'archiveUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 8641039651283627598),
            name: 'downloadsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(39, 5719499081832455171),
            name: 'issuesUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(40, 4334339978844646141),
            name: 'pullsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(41, 39556422108980694),
            name: 'milestonesUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(42, 611480141579587732),
            name: 'notificationsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(43, 296987061267433196),
            name: 'labelsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(44, 6042684481120993879),
            name: 'releasesUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(45, 7017868228531888318),
            name: 'deploymentsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(46, 6032958931890809446),
            name: 'createdAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(47, 3898240826559888814),
            name: 'updatedAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(48, 2514489579320579973),
            name: 'pushedAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(49, 2357662311899400224),
            name: 'gitUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(50, 3684995867202351778),
            name: 'sshUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(51, 7020989660269096831),
            name: 'cloneUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(52, 816794992636166273),
            name: 'svnUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(53, 5435241185983110675),
            name: 'homepage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(54, 1649868744997282659),
            name: 'size',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(55, 8010507574592888399),
            name: 'stargazersCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(56, 2425420923542334352),
            name: 'watchersCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(57, 4865404481745030372),
            name: 'language',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(58, 7027717193090539842),
            name: 'hasIssues',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(59, 6561010199015513573),
            name: 'hasProjects',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(60, 54640515993416544),
            name: 'hasDownloads',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(61, 3012944583366993391),
            name: 'hasWiki',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(62, 6543399840638298084),
            name: 'hasPages',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(63, 3719655545982307568),
            name: 'forksCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(64, 7015698500909205302),
            name: 'mirrorUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(65, 8654098365547638519),
            name: 'archived',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(66, 464275823256047335),
            name: 'disabled',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(67, 8087986003371350180),
            name: 'openIssuesCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(68, 7939285749969561792),
            name: 'allowForking',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(69, 4343285278928349139),
            name: 'isTemplate',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(70, 269731963655110671),
            name: 'topics',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(71, 3995965475277537967),
            name: 'visibility',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(72, 3397995814162942275),
            name: 'forks',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(73, 5420873686676928854),
            name: 'openIssues',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(74, 2804272094728396676),
            name: 'watchers',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(75, 5657864584266273461),
            name: 'defaultBranch',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(76, 1546860424863992864),
            name: 'score',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 1066076963080687218),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    DBItems: EntityDefinition<DBItems>(
        model: _entities[0],
        toOneRelations: (DBItems object) => [],
        toManyRelations: (DBItems object) => {},
        getId: (DBItems object) => object.id,
        setId: (DBItems object, int id) {
          object.id = id;
        },
        objectToFB: (DBItems object, fb.Builder fbb) {
          final nodeIdOffset =
              object.nodeId == null ? null : fbb.writeString(object.nodeId!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fullNameOffset = object.fullName == null
              ? null
              : fbb.writeString(object.fullName!);
          final htmlUrlOffset =
              object.htmlUrl == null ? null : fbb.writeString(object.htmlUrl!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final urlOffset =
              object.url == null ? null : fbb.writeString(object.url!);
          final forksUrlOffset = object.forksUrl == null
              ? null
              : fbb.writeString(object.forksUrl!);
          final keysUrlOffset =
              object.keysUrl == null ? null : fbb.writeString(object.keysUrl!);
          final collaboratorsUrlOffset = object.collaboratorsUrl == null
              ? null
              : fbb.writeString(object.collaboratorsUrl!);
          final teamsUrlOffset = object.teamsUrl == null
              ? null
              : fbb.writeString(object.teamsUrl!);
          final hooksUrlOffset = object.hooksUrl == null
              ? null
              : fbb.writeString(object.hooksUrl!);
          final issueEventsUrlOffset = object.issueEventsUrl == null
              ? null
              : fbb.writeString(object.issueEventsUrl!);
          final eventsUrlOffset = object.eventsUrl == null
              ? null
              : fbb.writeString(object.eventsUrl!);
          final assigneesUrlOffset = object.assigneesUrl == null
              ? null
              : fbb.writeString(object.assigneesUrl!);
          final branchesUrlOffset = object.branchesUrl == null
              ? null
              : fbb.writeString(object.branchesUrl!);
          final tagsUrlOffset =
              object.tagsUrl == null ? null : fbb.writeString(object.tagsUrl!);
          final blobsUrlOffset = object.blobsUrl == null
              ? null
              : fbb.writeString(object.blobsUrl!);
          final gitTagsUrlOffset = object.gitTagsUrl == null
              ? null
              : fbb.writeString(object.gitTagsUrl!);
          final gitRefsUrlOffset = object.gitRefsUrl == null
              ? null
              : fbb.writeString(object.gitRefsUrl!);
          final treesUrlOffset = object.treesUrl == null
              ? null
              : fbb.writeString(object.treesUrl!);
          final statusesUrlOffset = object.statusesUrl == null
              ? null
              : fbb.writeString(object.statusesUrl!);
          final languagesUrlOffset = object.languagesUrl == null
              ? null
              : fbb.writeString(object.languagesUrl!);
          final stargazersUrlOffset = object.stargazersUrl == null
              ? null
              : fbb.writeString(object.stargazersUrl!);
          final contributorsUrlOffset = object.contributorsUrl == null
              ? null
              : fbb.writeString(object.contributorsUrl!);
          final subscribersUrlOffset = object.subscribersUrl == null
              ? null
              : fbb.writeString(object.subscribersUrl!);
          final subscriptionUrlOffset = object.subscriptionUrl == null
              ? null
              : fbb.writeString(object.subscriptionUrl!);
          final commitsUrlOffset = object.commitsUrl == null
              ? null
              : fbb.writeString(object.commitsUrl!);
          final gitCommitsUrlOffset = object.gitCommitsUrl == null
              ? null
              : fbb.writeString(object.gitCommitsUrl!);
          final commentsUrlOffset = object.commentsUrl == null
              ? null
              : fbb.writeString(object.commentsUrl!);
          final issueCommentUrlOffset = object.issueCommentUrl == null
              ? null
              : fbb.writeString(object.issueCommentUrl!);
          final contentsUrlOffset = object.contentsUrl == null
              ? null
              : fbb.writeString(object.contentsUrl!);
          final compareUrlOffset = object.compareUrl == null
              ? null
              : fbb.writeString(object.compareUrl!);
          final mergesUrlOffset = object.mergesUrl == null
              ? null
              : fbb.writeString(object.mergesUrl!);
          final archiveUrlOffset = object.archiveUrl == null
              ? null
              : fbb.writeString(object.archiveUrl!);
          final downloadsUrlOffset = object.downloadsUrl == null
              ? null
              : fbb.writeString(object.downloadsUrl!);
          final issuesUrlOffset = object.issuesUrl == null
              ? null
              : fbb.writeString(object.issuesUrl!);
          final pullsUrlOffset = object.pullsUrl == null
              ? null
              : fbb.writeString(object.pullsUrl!);
          final milestonesUrlOffset = object.milestonesUrl == null
              ? null
              : fbb.writeString(object.milestonesUrl!);
          final notificationsUrlOffset = object.notificationsUrl == null
              ? null
              : fbb.writeString(object.notificationsUrl!);
          final labelsUrlOffset = object.labelsUrl == null
              ? null
              : fbb.writeString(object.labelsUrl!);
          final releasesUrlOffset = object.releasesUrl == null
              ? null
              : fbb.writeString(object.releasesUrl!);
          final deploymentsUrlOffset = object.deploymentsUrl == null
              ? null
              : fbb.writeString(object.deploymentsUrl!);
          final createdAtOffset = object.createdAt == null
              ? null
              : fbb.writeString(object.createdAt!);
          final updatedAtOffset = object.updatedAt == null
              ? null
              : fbb.writeString(object.updatedAt!);
          final pushedAtOffset = object.pushedAt == null
              ? null
              : fbb.writeString(object.pushedAt!);
          final gitUrlOffset =
              object.gitUrl == null ? null : fbb.writeString(object.gitUrl!);
          final sshUrlOffset =
              object.sshUrl == null ? null : fbb.writeString(object.sshUrl!);
          final cloneUrlOffset = object.cloneUrl == null
              ? null
              : fbb.writeString(object.cloneUrl!);
          final svnUrlOffset =
              object.svnUrl == null ? null : fbb.writeString(object.svnUrl!);
          final homepageOffset = object.homepage == null
              ? null
              : fbb.writeString(object.homepage!);
          final languageOffset = object.language == null
              ? null
              : fbb.writeString(object.language!);
          final mirrorUrlOffset = object.mirrorUrl == null
              ? null
              : fbb.writeString(object.mirrorUrl!);
          final topicsOffset = object.topics == null
              ? null
              : fbb.writeList(
                  object.topics!.map(fbb.writeString).toList(growable: false));
          final visibilityOffset = object.visibility == null
              ? null
              : fbb.writeString(object.visibility!);
          final defaultBranchOffset = object.defaultBranch == null
              ? null
              : fbb.writeString(object.defaultBranch!);
          fbb.startTable(77);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nodeIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fullNameOffset);
          fbb.addBool(4, object.private);
          fbb.addOffset(5, htmlUrlOffset);
          fbb.addOffset(6, descriptionOffset);
          fbb.addBool(7, object.fork);
          fbb.addOffset(8, urlOffset);
          fbb.addOffset(9, forksUrlOffset);
          fbb.addOffset(10, keysUrlOffset);
          fbb.addOffset(11, collaboratorsUrlOffset);
          fbb.addOffset(12, teamsUrlOffset);
          fbb.addOffset(13, hooksUrlOffset);
          fbb.addOffset(14, issueEventsUrlOffset);
          fbb.addOffset(15, eventsUrlOffset);
          fbb.addOffset(16, assigneesUrlOffset);
          fbb.addOffset(17, branchesUrlOffset);
          fbb.addOffset(18, tagsUrlOffset);
          fbb.addOffset(19, blobsUrlOffset);
          fbb.addOffset(20, gitTagsUrlOffset);
          fbb.addOffset(21, gitRefsUrlOffset);
          fbb.addOffset(22, treesUrlOffset);
          fbb.addOffset(23, statusesUrlOffset);
          fbb.addOffset(24, languagesUrlOffset);
          fbb.addOffset(25, stargazersUrlOffset);
          fbb.addOffset(26, contributorsUrlOffset);
          fbb.addOffset(27, subscribersUrlOffset);
          fbb.addOffset(28, subscriptionUrlOffset);
          fbb.addOffset(29, commitsUrlOffset);
          fbb.addOffset(30, gitCommitsUrlOffset);
          fbb.addOffset(31, commentsUrlOffset);
          fbb.addOffset(32, issueCommentUrlOffset);
          fbb.addOffset(33, contentsUrlOffset);
          fbb.addOffset(34, compareUrlOffset);
          fbb.addOffset(35, mergesUrlOffset);
          fbb.addOffset(36, archiveUrlOffset);
          fbb.addOffset(37, downloadsUrlOffset);
          fbb.addOffset(38, issuesUrlOffset);
          fbb.addOffset(39, pullsUrlOffset);
          fbb.addOffset(40, milestonesUrlOffset);
          fbb.addOffset(41, notificationsUrlOffset);
          fbb.addOffset(42, labelsUrlOffset);
          fbb.addOffset(43, releasesUrlOffset);
          fbb.addOffset(44, deploymentsUrlOffset);
          fbb.addOffset(45, createdAtOffset);
          fbb.addOffset(46, updatedAtOffset);
          fbb.addOffset(47, pushedAtOffset);
          fbb.addOffset(48, gitUrlOffset);
          fbb.addOffset(49, sshUrlOffset);
          fbb.addOffset(50, cloneUrlOffset);
          fbb.addOffset(51, svnUrlOffset);
          fbb.addOffset(52, homepageOffset);
          fbb.addInt64(53, object.size);
          fbb.addInt64(54, object.stargazersCount);
          fbb.addInt64(55, object.watchersCount);
          fbb.addOffset(56, languageOffset);
          fbb.addBool(57, object.hasIssues);
          fbb.addBool(58, object.hasProjects);
          fbb.addBool(59, object.hasDownloads);
          fbb.addBool(60, object.hasWiki);
          fbb.addBool(61, object.hasPages);
          fbb.addInt64(62, object.forksCount);
          fbb.addOffset(63, mirrorUrlOffset);
          fbb.addBool(64, object.archived);
          fbb.addBool(65, object.disabled);
          fbb.addInt64(66, object.openIssuesCount);
          fbb.addBool(67, object.allowForking);
          fbb.addBool(68, object.isTemplate);
          fbb.addOffset(69, topicsOffset);
          fbb.addOffset(70, visibilityOffset);
          fbb.addInt64(71, object.forks);
          fbb.addInt64(72, object.openIssues);
          fbb.addInt64(73, object.watchers);
          fbb.addOffset(74, defaultBranchOffset);
          fbb.addFloat64(75, object.score);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DBItems(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              nodeId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              fullName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              private: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              htmlUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              fork: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              url: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              forksUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              keysUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              collaboratorsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              teamsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 28),
              hooksUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30),
              issueEventsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32),
              eventsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 34),
              assigneesUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 36),
              branchesUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 38),
              tagsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 40),
              blobsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 42),
              gitTagsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 44),
              gitRefsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 46),
              treesUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 48),
              statusesUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 50),
              languagesUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 52),
              stargazersUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 54),
              contributorsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 56),
              subscribersUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 58),
              subscriptionUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 60),
              commitsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 62),
              gitCommitsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 64),
              commentsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 66),
              issueCommentUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 68),
              contentsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 70),
              compareUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 72),
              mergesUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 74),
              archiveUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 76),
              downloadsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 78),
              issuesUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 80),
              pullsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 82),
              milestonesUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 84),
              notificationsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 86),
              labelsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 88),
              releasesUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 90),
              deploymentsUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 92),
              createdAt: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 94),
              updatedAt: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 96),
              pushedAt: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 98),
              gitUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 100),
              sshUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 102),
              cloneUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 104),
              svnUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 106),
              homepage: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 108),
              size: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 110),
              stargazersCount: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 112),
              watchersCount: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 114),
              language: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 116),
              hasIssues: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 118),
              hasProjects: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 120),
              hasDownloads: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 122),
              hasWiki: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 124),
              hasPages: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 126),
              forksCount: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 128),
              mirrorUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 130),
              archived: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 132),
              disabled: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 134),
              openIssuesCount: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 136),
              allowForking: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 138),
              isTemplate: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 140),
              topics: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGetNullable(buffer, rootOffset, 142),
              visibility: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 144),
              forks: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 146),
              openIssues: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 148),
              watchers: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 150),
              defaultBranch: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 152),
              score: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 154));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [DBItems] entity fields to define ObjectBox queries.
class DBItems_ {
  /// see [DBItems.id]
  static final id = QueryIntegerProperty<DBItems>(_entities[0].properties[0]);

  /// see [DBItems.nodeId]
  static final nodeId =
      QueryStringProperty<DBItems>(_entities[0].properties[1]);

  /// see [DBItems.name]
  static final name = QueryStringProperty<DBItems>(_entities[0].properties[2]);

  /// see [DBItems.fullName]
  static final fullName =
      QueryStringProperty<DBItems>(_entities[0].properties[3]);

  /// see [DBItems.private]
  static final private =
      QueryBooleanProperty<DBItems>(_entities[0].properties[4]);

  /// see [DBItems.htmlUrl]
  static final htmlUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[5]);

  /// see [DBItems.description]
  static final description =
      QueryStringProperty<DBItems>(_entities[0].properties[6]);

  /// see [DBItems.fork]
  static final fork = QueryBooleanProperty<DBItems>(_entities[0].properties[7]);

  /// see [DBItems.url]
  static final url = QueryStringProperty<DBItems>(_entities[0].properties[8]);

  /// see [DBItems.forksUrl]
  static final forksUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[9]);

  /// see [DBItems.keysUrl]
  static final keysUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[10]);

  /// see [DBItems.collaboratorsUrl]
  static final collaboratorsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[11]);

  /// see [DBItems.teamsUrl]
  static final teamsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[12]);

  /// see [DBItems.hooksUrl]
  static final hooksUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[13]);

  /// see [DBItems.issueEventsUrl]
  static final issueEventsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[14]);

  /// see [DBItems.eventsUrl]
  static final eventsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[15]);

  /// see [DBItems.assigneesUrl]
  static final assigneesUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[16]);

  /// see [DBItems.branchesUrl]
  static final branchesUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[17]);

  /// see [DBItems.tagsUrl]
  static final tagsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[18]);

  /// see [DBItems.blobsUrl]
  static final blobsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[19]);

  /// see [DBItems.gitTagsUrl]
  static final gitTagsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[20]);

  /// see [DBItems.gitRefsUrl]
  static final gitRefsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[21]);

  /// see [DBItems.treesUrl]
  static final treesUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[22]);

  /// see [DBItems.statusesUrl]
  static final statusesUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[23]);

  /// see [DBItems.languagesUrl]
  static final languagesUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[24]);

  /// see [DBItems.stargazersUrl]
  static final stargazersUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[25]);

  /// see [DBItems.contributorsUrl]
  static final contributorsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[26]);

  /// see [DBItems.subscribersUrl]
  static final subscribersUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[27]);

  /// see [DBItems.subscriptionUrl]
  static final subscriptionUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[28]);

  /// see [DBItems.commitsUrl]
  static final commitsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[29]);

  /// see [DBItems.gitCommitsUrl]
  static final gitCommitsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[30]);

  /// see [DBItems.commentsUrl]
  static final commentsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[31]);

  /// see [DBItems.issueCommentUrl]
  static final issueCommentUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[32]);

  /// see [DBItems.contentsUrl]
  static final contentsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[33]);

  /// see [DBItems.compareUrl]
  static final compareUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[34]);

  /// see [DBItems.mergesUrl]
  static final mergesUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[35]);

  /// see [DBItems.archiveUrl]
  static final archiveUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[36]);

  /// see [DBItems.downloadsUrl]
  static final downloadsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[37]);

  /// see [DBItems.issuesUrl]
  static final issuesUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[38]);

  /// see [DBItems.pullsUrl]
  static final pullsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[39]);

  /// see [DBItems.milestonesUrl]
  static final milestonesUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[40]);

  /// see [DBItems.notificationsUrl]
  static final notificationsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[41]);

  /// see [DBItems.labelsUrl]
  static final labelsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[42]);

  /// see [DBItems.releasesUrl]
  static final releasesUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[43]);

  /// see [DBItems.deploymentsUrl]
  static final deploymentsUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[44]);

  /// see [DBItems.createdAt]
  static final createdAt =
      QueryStringProperty<DBItems>(_entities[0].properties[45]);

  /// see [DBItems.updatedAt]
  static final updatedAt =
      QueryStringProperty<DBItems>(_entities[0].properties[46]);

  /// see [DBItems.pushedAt]
  static final pushedAt =
      QueryStringProperty<DBItems>(_entities[0].properties[47]);

  /// see [DBItems.gitUrl]
  static final gitUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[48]);

  /// see [DBItems.sshUrl]
  static final sshUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[49]);

  /// see [DBItems.cloneUrl]
  static final cloneUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[50]);

  /// see [DBItems.svnUrl]
  static final svnUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[51]);

  /// see [DBItems.homepage]
  static final homepage =
      QueryStringProperty<DBItems>(_entities[0].properties[52]);

  /// see [DBItems.size]
  static final size =
      QueryIntegerProperty<DBItems>(_entities[0].properties[53]);

  /// see [DBItems.stargazersCount]
  static final stargazersCount =
      QueryIntegerProperty<DBItems>(_entities[0].properties[54]);

  /// see [DBItems.watchersCount]
  static final watchersCount =
      QueryIntegerProperty<DBItems>(_entities[0].properties[55]);

  /// see [DBItems.language]
  static final language =
      QueryStringProperty<DBItems>(_entities[0].properties[56]);

  /// see [DBItems.hasIssues]
  static final hasIssues =
      QueryBooleanProperty<DBItems>(_entities[0].properties[57]);

  /// see [DBItems.hasProjects]
  static final hasProjects =
      QueryBooleanProperty<DBItems>(_entities[0].properties[58]);

  /// see [DBItems.hasDownloads]
  static final hasDownloads =
      QueryBooleanProperty<DBItems>(_entities[0].properties[59]);

  /// see [DBItems.hasWiki]
  static final hasWiki =
      QueryBooleanProperty<DBItems>(_entities[0].properties[60]);

  /// see [DBItems.hasPages]
  static final hasPages =
      QueryBooleanProperty<DBItems>(_entities[0].properties[61]);

  /// see [DBItems.forksCount]
  static final forksCount =
      QueryIntegerProperty<DBItems>(_entities[0].properties[62]);

  /// see [DBItems.mirrorUrl]
  static final mirrorUrl =
      QueryStringProperty<DBItems>(_entities[0].properties[63]);

  /// see [DBItems.archived]
  static final archived =
      QueryBooleanProperty<DBItems>(_entities[0].properties[64]);

  /// see [DBItems.disabled]
  static final disabled =
      QueryBooleanProperty<DBItems>(_entities[0].properties[65]);

  /// see [DBItems.openIssuesCount]
  static final openIssuesCount =
      QueryIntegerProperty<DBItems>(_entities[0].properties[66]);

  /// see [DBItems.allowForking]
  static final allowForking =
      QueryBooleanProperty<DBItems>(_entities[0].properties[67]);

  /// see [DBItems.isTemplate]
  static final isTemplate =
      QueryBooleanProperty<DBItems>(_entities[0].properties[68]);

  /// see [DBItems.topics]
  static final topics =
      QueryStringVectorProperty<DBItems>(_entities[0].properties[69]);

  /// see [DBItems.visibility]
  static final visibility =
      QueryStringProperty<DBItems>(_entities[0].properties[70]);

  /// see [DBItems.forks]
  static final forks =
      QueryIntegerProperty<DBItems>(_entities[0].properties[71]);

  /// see [DBItems.openIssues]
  static final openIssues =
      QueryIntegerProperty<DBItems>(_entities[0].properties[72]);

  /// see [DBItems.watchers]
  static final watchers =
      QueryIntegerProperty<DBItems>(_entities[0].properties[73]);

  /// see [DBItems.defaultBranch]
  static final defaultBranch =
      QueryStringProperty<DBItems>(_entities[0].properties[74]);

  /// see [DBItems.score]
  static final score =
      QueryDoubleProperty<DBItems>(_entities[0].properties[75]);
}
