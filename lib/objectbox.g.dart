// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'db/itemModel.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1479974708227572961),
      name: 'DbItems',
      lastPropertyId: const IdUid(9, 6799352174664107762),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1709978849846430112),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4596794031152664373),
            name: 'repoId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5656228021437910757),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2950278909201888468),
            name: 'avatarUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5979671531085282980),
            name: 'login',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1210523700310612058),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 259958927595205448),
            name: 'updatedAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7483380165972702429),
            name: 'pushedAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6799352174664107762),
            name: 'stargazersCount',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 1479974708227572961),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    DbItems: EntityDefinition<DbItems>(
        model: _entities[0],
        toOneRelations: (DbItems object) => [],
        toManyRelations: (DbItems object) => {},
        getId: (DbItems object) => object.id,
        setId: (DbItems object, int id) {
          object.id = id;
        },
        objectToFB: (DbItems object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final avatarUrlOffset = object.avatarUrl == null
              ? null
              : fbb.writeString(object.avatarUrl!);
          final loginOffset =
              object.login == null ? null : fbb.writeString(object.login!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final updatedAtOffset = object.updatedAt == null
              ? null
              : fbb.writeString(object.updatedAt!);
          final pushedAtOffset = object.pushedAt == null
              ? null
              : fbb.writeString(object.pushedAt!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.repoId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, avatarUrlOffset);
          fbb.addOffset(4, loginOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addOffset(6, updatedAtOffset);
          fbb.addOffset(7, pushedAtOffset);
          fbb.addInt64(8, object.stargazersCount);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DbItems(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              repoId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 6),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              avatarUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              login: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              updatedAt: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              pushedAt: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              stargazersCount:
                  const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [DbItems] entity fields to define ObjectBox queries.
class DbItems_ {
  /// see [DbItems.id]
  static final id = QueryIntegerProperty<DbItems>(_entities[0].properties[0]);

  /// see [DbItems.repoId]
  static final repoId =
      QueryIntegerProperty<DbItems>(_entities[0].properties[1]);

  /// see [DbItems.name]
  static final name = QueryStringProperty<DbItems>(_entities[0].properties[2]);

  /// see [DbItems.avatarUrl]
  static final avatarUrl =
      QueryStringProperty<DbItems>(_entities[0].properties[3]);

  /// see [DbItems.login]
  static final login = QueryStringProperty<DbItems>(_entities[0].properties[4]);

  /// see [DbItems.description]
  static final description =
      QueryStringProperty<DbItems>(_entities[0].properties[5]);

  /// see [DbItems.updatedAt]
  static final updatedAt =
      QueryStringProperty<DbItems>(_entities[0].properties[6]);

  /// see [DbItems.pushedAt]
  static final pushedAt =
      QueryStringProperty<DbItems>(_entities[0].properties[7]);

  /// see [DbItems.stargazersCount]
  static final stargazersCount =
      QueryIntegerProperty<DbItems>(_entities[0].properties[8]);
}
